# Example environment configuration for JK Utbildningsintyg
# Copy this file to `.env` and adjust the values for your environment.

# SMTP server settings used to send account activation emails
# Use port 587 for STARTTLS or 465 for SSL. The example below shows how to
# configure a Gmail account that has an app password enabled.
smtp_port=587
smtp_server=smtp.gmail.com
smtp_user=utbildning.demo@gmail.com
smtp_password=bytMig123!
smtp_timeout=10

# Administrator credentials for the admin panel
admin_username=utbildningsadmin
admin_password=SakertLosen123!

# Hemlig nyckel som Flask använder för att skydda sessioner
secret_key=hemligt_session_varde

# Hashningsinställningar för personuppgifter (PBKDF2)
HASH_SALT=extra_salt_for_hash
# Antal iterationer i produktion respektive tester
HASH_ITERATIONS=600000
HASH_ITERATIONS_TEST=1000

# Database configuration
# Supply credentials for the external PostgreSQL server that stores
# application data. POSTGRES_HOST is required when DATABASE_URL is empty.
POSTGRES_HOST=db.example.se
POSTGRES_DB=utbildningsintyg
POSTGRES_USER=jk_admin
POSTGRES_PASSWORD=BytMigDirekt
POSTGRES_PORT=5432
# Alternatively provide a full SQLAlchemy connection string if you prefer.
# When set, DATABASE_URL takes precedence over the POSTGRES_* values.
DATABASE_URL=postgresql+psycopg2://jk_admin:BytMigDirekt@db.example.se:5432/utbildningsintyg
# Optional: enable a local SQLite database for test purposes. When set to
# ``true`` the application will create (or reuse) the file specified by
# LOCAL_TEST_DB_PATH and connect to it instead of PostgreSQL.
ENABLE_LOCAL_TEST_DB=False
# Path for the local SQLite database file when ENABLE_LOCAL_TEST_DB is true.
# Relative paths resolve inside the application directory. Use ``:memory:``
# to create an in-memory database instead of a file on disk.
LOCAL_TEST_DB_PATH=instance/test.db

# Optional: TLS certificate and key for HTTPS
# Paste the PEM contents directly. Use \n for newlines if necessary.
# When both values are provided the application will start with HTTPS.
TLS_CERT=-----BEGIN CERTIFICATE-----\nMIIDgzCCAmugAwIBAgIUVdDemoCert1234567890\n-----END CERTIFICATE-----
TLS_KEY=-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcw\n-----END PRIVATE KEY-----

# Antal betrodda proxyhopp när applikationen körs bakom en omvänd proxy.
# Standardvärdet 1 motsvarar den Nginx-proxy som ingår i docker-compose.
TRUSTED_PROXY_COUNT=1

# Enable debug mode for development
FLASK_DEBUG=False
# Porten som Flask ska exponeras på när TLS är aktiverat direkt i appen
PORT=8080

# Demo mode configuration (optional)
# När ENABLE_DEMO_MODE är true fylls databasen med ett företagskonto och ett standardkonto enligt uppgifterna nedan.
# Demotjänsten i docker-compose.yml aktiverar detta automatiskt med en temporär SQLite-databas.
ENABLE_DEMO_MODE=False
DEMO_USER_EMAIL=demo.anvandare@example.com
DEMO_USER_NAME=Demoanvändare
DEMO_USER_PERSONNUMMER=199001011234
DEMO_USER_PASSWORD=DemoLösenord1!
DEMO_SUPERVISOR_EMAIL=demo.foretagskonto@example.com
DEMO_SUPERVISOR_NAME=Demoföretagskonto
DEMO_SUPERVISOR_PASSWORD=DemoForetagskonto1!
DEMO_SUPERVISOR_ORGNR=5560160680
DEMO_SITE_URL=http://localhost:8080

# Namnet på ett externt Docker-nätverk som ska återanvändas av proxyn.
# Lämna värdet tomt för att låta docker compose skapa ett nytt nätverk.
#PUBLIC_NETWORK_NAME=public_net


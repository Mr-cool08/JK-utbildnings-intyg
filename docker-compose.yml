services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s
    networks:
      postgres_db:
        ipv4_address: 172.28.0.10
    restart: always

  app:
    build: .
    user: "0:0"
    env_file:
      - stack.env
    environment:
      DEMO_SITE_URL: ${DEMO_SITE_URL}
      # OBS: Om din Flask-app läser "secret_key" (gemener), sätt den i stack.env eller här:
      # secret_key: ${SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      postgres_db:
        ipv4_address: 172.28.0.20
      public_net: {}
    expose:
      - "80"
    restart: unless-stopped

  app_demo:
    build: .
    user: "0:0"
    env_file:
      - stack.env
    environment:
      ENABLE_DEMO_MODE: "true"
      ENABLE_LOCAL_TEST_DB: "true"
      LOCAL_TEST_DB_PATH: "/tmp/demo-app.db"
      SECRET_KEY: ${DEMO_SECRET_KEY}
      HASH_SALT: ${DEMO_HASH_SALT}
      DEMO_USER_EMAIL: ${DEMO_USER_EMAIL}
      DEMO_USER_NAME: ${DEMO_USER_NAME}
      DEMO_USER_PERSONNUMMER: ${DEMO_USER_PERSONNUMMER}
      DEMO_USER_PASSWORD: ${DEMO_USER_PASSWORD}
      DEMO_SUPERVISOR_EMAIL: ${DEMO_SUPERVISOR_EMAIL}
      DEMO_SUPERVISOR_NAME: ${DEMO_SUPERVISOR_NAME}
      DEMO_SUPERVISOR_PASSWORD: ${DEMO_SUPERVISOR_PASSWORD}
    networks:
      public_net: {}
    expose:
      - "80"
    restart: unless-stopped

  caddy:
    image: caddy:2
    depends_on:
      - app
      - app_demo
    ports:
      - "80:80"
      - "443:443"
    networks:
      - public_net
    environment:
      DOMAIN_MAIN: "utbildningsintyg.se"
      DOMAIN_DEMO: "demo.utbildningsintyg.se"
      ACME_EMAIL: "liam@utbildningsintyg.se"

    volumes:
      - caddy_data:/data
      - caddy_config:/config
    entrypoint:
      - /bin/sh
      - -c
      - |
        mkdir -p /etc/caddy
        : > /etc/caddy/Caddyfile
        
        # WWW -> apex redirect (bara om båda är satta)
          cat >> /etc/caddy/Caddyfile <<EOF
          redir https://$${DOMAIN_MAIN}{uri}
        }
        EOF
        fi
        
        # Apex -> app
        if [ -n "$${DOMAIN_MAIN}" ]; then
          cat >> /etc/caddy/Caddyfile <<EOF
        $${DOMAIN_MAIN} {
          encode zstd gzip
          header {
            Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
            X-Content-Type-Options "nosniff"
            Referrer-Policy "strict-origin-when-cross-origin"
          }
          reverse_proxy app:80
        }
        EOF
        fi
        
        # Demo -> app_demo
        if [ -n "$${DOMAIN_DEMO}" ]; then
          cat >> /etc/caddy/Caddyfile <<EOF
        $${DOMAIN_DEMO} {
          encode zstd gzip
          header {
            Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
            X-Content-Type-Options "nosniff"
            Referrer-Policy "strict-origin-when-cross-origin"
          }
          reverse_proxy app_demo:80
        }
        EOF
        fi
        
        echo "----- /etc/caddy/Caddyfile -----"
        cat /etc/caddy/Caddyfile
        echo "--------------------------------"
        
        exec caddy run --environ --config /etc/caddy/Caddyfile
    restart: unless-stopped

volumes:
  pgdata:
  caddy_data:
  caddy_config:

networks:
  postgres_db:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
  public_net:
    driver: bridge
